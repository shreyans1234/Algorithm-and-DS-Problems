class Solution {
public:
    //Incresing subsequences of size k
    int num_inc(vector<int>& arr, int k)
    {
        int n = arr.size();
        
        vector<vector<int>> dp(k, vector<int>(n, 0));
        
        for(int i = 0; i < n; i++)
            dp[0][i] = 1;
        
        for(int len = 1; len < k; len++)
        {
            for(int i = len; i < n; i++)
            {
                for(int j = len-1; j < i; j++)
                {
                    if(arr[j] < arr[i])
                    {
                        dp[len][i] += dp[len-1][j];
                    }
                }
            }
        }
        
        int res = 0;
        
        for(int i = k-1; i < n; i++)
            res += dp[k-1][i];
        
        return res;
    }
    
    //Decreasing subsequences of size k
    int num_dec(vector<int>& arr, int k)
    {
        int n = arr.size();
        
        vector<vector<int>> dp(k, vector<int>(n, 0));
        
        for(int i = 0; i < n; i++)
            dp[0][i] = 1;
        
        for(int len = 1; len < k; len++)
        {
            for(int i = len; i < n; i++)
            {
                for(int j = len-1; j < i; j++)
                {
                    if(arr[j] > arr[i])
                    {
                        dp[len][i] += dp[len-1][j];
                    }
                }
            }
        }
        
        int res = 0;
        
        for(int i = k-1; i < n; i++)
            res += dp[k-1][i];
        
        return res;
    }
    
    int numTeams(vector<int>& rating) 
    {
        return num_inc(rating, 3) + num_dec(rating, 3);
    }
};

Another Approach:(Discussion)
public:
	int numTeams(vector<int>& arr) {
		int count = 0;
		int len = arr.size();
		for (int j = 0; j < len; j++) {
			int leftSmaller = 0, rightLarger = 0;
			int leftLarger = 0, rightSmaller = 0;
			for (int i = 0; i < j; i++) {
				if (arr[i] < arr[j]) {
					leftSmaller++;
				} else if (arr[i] > arr[j]) {
					leftLarger++;
				}
			}
			for (int k = j + 1; k < len; k++) {
				if (arr[j] < arr[k]) {
					rightLarger++;
				} else if (arr[j] > arr[k]) {
					rightSmaller++;
				}
			}
			count += leftSmaller * rightLarger + leftLarger * rightSmaller;
		}

		return count;
	}
